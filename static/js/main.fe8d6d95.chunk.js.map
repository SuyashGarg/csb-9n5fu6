{"version":3,"sources":["data.js","DargAndDropUtil.js","Cards.jsx","Sections.jsx","App.js","index.js"],"names":["WorkBookData","id","content","sections","cards","getTextWidth","text","document","createElement","body","appendChild","style","height","width","position","whiteSpace","paddingLeft","paddingRight","innerHTML","updatedWidthWithMarginAndBorder","Math","ceil","clientWidth","removeChild","chunkArray","array","index","maxContentWidth","arguments","length","undefined","arrayLength","tempArray","currentLength","startIndex","endIndex","push","slice","getListStyle","isDraggingOver","background","padding","paddingBottom","display","Cards","_React$Component","Object","inherits","_super","createSuper","_this","classCallCheck","this","_len","args","Array","_key","call","apply","concat","state","isOpen","maxWidth","openSection","setState","isDraggingOnToSection","isDragged","console","log","createClass","key","value","getElementById","item","react_default","a","react_beautiful_dnd_esm","draggableId","provided","snapshot","assign","ref","innerRef","draggableProps","isDragging","draggableStyle","objectSpread2","userSelect","minWidth","overflow","margin","border","textOverflow","dragHandleProps","placeholder","_this2","cardsData","props","Fragment","onClick","top","right","map","droppableId","type","direction","minHeight","visibility","overflowX","renderDraggable","React","Component","Sections","_Component","flex","items","grid","marginLeft","marginRight","Cards_Cards","App","sortList","sortedList","reorderList","sourceIndex","destinationIndex","list","order","render","className","lib","maxItems","ListElement","onDragEnd","sort","first","second","_ref","App_App","reorder","result","from","_result$splice","splice","removed","slicedToArray","getItemStyle","window","innerWidth","getIndex","sectionID","split","findIndex","x"],"mappings":"2NAAaA,EAAe,CAC1B,CACEC,GAAI,QACJC,QAAS,WACTC,SAAU,CACR,CACEF,GAAI,WACJC,QAAS,cACTE,MAAO,CACL,CACEH,GAAI,QACJC,QAAS,cAIf,CACED,GAAI,WACJC,QAAS,cACTE,MAAO,CACL,CACEH,GAAI,QACJC,QAAS,gBAMnB,CACED,GAAI,QACJC,QAAS,WACTC,SAAU,CACR,CACEF,GAAI,WACJC,QAAS,cACTE,MAAO,CACL,CACEH,GAAI,QACJC,QAAS,gDAEX,CACED,GAAI,QACJC,QAAS,6BAEX,CACED,GAAI,QACJC,QAAS,uBAEX,CACED,GAAI,QACJC,QAAO,yBAET,CACED,GAAI,QACJC,QAAS,mBAEX,CACED,GAAI,QACJC,QAAS,wBAEX,CACED,GAAI,QACJC,QAAS,+BAEX,CACED,GAAI,SACJC,QAAS,4BAEX,CACED,GAAI,SACJC,QAAS,yBAEX,CACED,GAAI,SACJC,QAAS,6BAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,aAEX,CACED,GAAI,SACJC,QAAS,eAIf,CACED,GAAI,WACJC,QAAS,cACTE,MAAO,CACL,CACEH,GAAI,SACJC,QAAS,kBCnJrB,SAASG,EAAaH,GACpB,IAAMI,EAAOC,SAASC,cAAc,OACpCD,SAASE,KAAKC,YAAYJ,GAE1BA,EAAKK,MAAMC,OAAS,OACpBN,EAAKK,MAAME,MAAQ,OACnBP,EAAKK,MAAMG,SAAW,WACtBR,EAAKK,MAAMI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","file":"static/js/main.fe8d6d95.chunk.js","sourcesContent":["export const WorkBookData = [\n  {\n    id: \"list1\",\n    content: \"List - 1\",\n    sections: [\n      {\n        id: \"section1\",\n        content: \"Section - 1\",\n        cards: [\n          {\n            id: \"card1\",\n            content: \"Card - 1\"\n          }\n        ]\n      },\n      {\n        id: \"section2\",\n        content: \"Section - 2\",\n        cards: [\n          {\n            id: \"card2\",\n            content: \"Card - 2\"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    id: \"list2\",\n    content: \"List - 2\",\n    sections: [\n      {\n        id: \"section3\",\n        content: \"Section - 3\",\n        cards: [\n          {\n            id: \"card3\",\n            content: \"3 - This is a Description This a descrption2\"\n          },\n          {\n            id: \"card4\",\n            content: \"4 - This is just for test\"\n          },\n          {\n            id: \"card5\",\n            content: \"5 - Do it right now\"\n          },\n          {\n            id: \"card6\",\n            content: `6 - Okay! Let's do it`\n          },\n          {\n            id: \"card7\",\n            content: \"7 - Lorum Epsum\"\n          },\n          {\n            id: \"card8\",\n            content: \"8 - This is a Sample\"\n          },\n          {\n            id: \"card9\",\n            content: \"9 - Hiring the right person\"\n          },\n          {\n            id: \"card10\",\n            content: \"10 - What is onboarding?\"\n          },\n          {\n            id: \"card11\",\n            content: \"11 - What is Physics?\"\n          },\n          {\n            id: \"card12\",\n            content: \"12 - Answer the Following\"\n          },\n          {\n            id: \"card13\",\n            content: \"Card - 13\"\n          },\n          {\n            id: \"card14\",\n            content: \"Card - 14\"\n          },\n          {\n            id: \"card15\",\n            content: \"Card - 15\"\n          },\n          {\n            id: \"card16\",\n            content: \"Card - 16\"\n          },\n          {\n            id: \"card17\",\n            content: \"Card - 17\"\n          },\n          {\n            id: \"card18\",\n            content: \"Card - 18\"\n          },\n          {\n            id: \"card19\",\n            content: \"Card - 19\"\n          },\n          {\n            id: \"card20\",\n            content: \"Card - 20\"\n          },\n          {\n            id: \"card21\",\n            content: \"Card - 21\"\n          },\n          {\n            id: \"card22\",\n            content: \"Card - 22\"\n          },\n          {\n            id: \"card23\",\n            content: \"Card - 23\"\n          },\n          {\n            id: \"card24\",\n            content: \"Card - 24\"\n          },\n          {\n            id: \"card25\",\n            content: \"Card - 25\"\n          },\n          {\n            id: \"card26\",\n            content: \"Card - 26\"\n          },\n          {\n            id: \"card27\",\n            content: \"Card - 27\"\n          },\n          {\n            id: \"card28\",\n            content: \"Card - 28\"\n          }\n        ]\n      },\n      {\n        id: \"section4\",\n        content: \"Section - 4\",\n        cards: [\n          {\n            id: \"card29\",\n            content: \"Card - 29\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\n// ,\n// {\n//    id: 'card29',\n//    content: '29 - This is a Description This a descrption2'\n// },\n// {\n//    id: 'card30',\n//    content: '30 - This is just for test'\n// },\n// {\n//    id: 'card31',\n//    content: '31 - Do it right now'\n// },\n// {\n//    id: 'card32',\n//    content: `32 - Okay! Let's do it`\n// },\n// {\n//    id: 'card33',\n//    content: '33 - Lorum Epsum'\n// },\n// {\n//    id: 'card34',\n//    content: '8 - This is a Sample'\n// },\n// {\n//    id: 'carda9',\n//    content: '9 - Hiring the right person'\n// },\n// {\n//    id: 'carda10',\n//    content: '10 - What is onboarding?'\n// },\n// {\n//    id: 'carda11',\n//    content: '11 - What is Physics?'\n// },\n// {\n//    id: 'carda12',\n//    content: '12 - Answer the Following'\n// },\n// {\n//    id: 'carda13',\n//    content: 'Card - 13'\n// },\n// {\n//    id: 'carda14',\n//    content: 'Card - 14'\n// },\n// {\n//    id: 'carda15',\n//    content: 'Card - 15'\n// },\n// {\n//    id: 'carda16',\n//    content: 'Card - 16'\n// },\n// {\n//    id: 'carda17',\n//    content: 'Card - 17'\n// },\n// {\n//    id: 'carda18',\n//    content: 'Card - 18'\n// },\n// {\n//    id: 'carda19',\n//    content: 'Card - 19'\n// },\n// {\n//    id: 'carda20',\n//    content: 'Card - 20'\n// },\n// {\n//    id: 'carda21',\n//    content: 'Card - 21'\n// },\n// {\n//    id: 'carda22',\n//    content: 'Card - 22'\n// },\n// {\n//    id: 'carda23',\n//    content: 'Card - 23'\n// },\n// {\n//    id: 'carda24',\n//    content: 'Card - 24'\n// },\n// {\n//    id: 'carda25',\n//    content: 'Card - 25'\n// },\n// {\n//    id: 'carda26',\n//    content: 'Card - 26'\n// },\n// {\n//    id: 'carda27',\n//    content: 'Card - 27'\n// },\n// {\n//    id: 'carda28',\n//    content: 'Card - 28'\n// },\n// {\n//    id: 'cardb3',\n//    content: '3 - This is a Description This a descrption2'\n// },\n// {\n//    id: 'cardb4',\n//    content: '4 - This is just for test'\n// },\n// {\n//    id: 'cardb5',\n//    content: '5 - Do it right now'\n// },\n// {\n//    id: 'cardb6',\n//    content: `6 - Okay! Let's do it`\n// },\n// {\n//    id: 'cardb7',\n//    content: '7 - Lorum Epsum'\n// },\n// {\n//    id: 'cardb8',\n//    content: '8 - This is a Sample'\n// },\n// {\n//    id: 'cardb9',\n//    content: '9 - Hiring the right person'\n// },\n// {\n//    id: 'cardb10',\n//    content: '10 - What is onboarding?'\n// },\n// {\n//    id: 'cardb11',\n//    content: '11 - What is Physics?'\n// },\n// {\n//    id: 'cardb12',\n//    content: '12 - Answer the Following'\n// },\n// {\n//    id: 'cardb13',\n//    content: 'Card - 13'\n// },\n// {\n//    id: 'cardb14',\n//    content: 'Card - 14'\n// },\n// {\n//    id: 'cardb15',\n//    content: 'Card - 15'\n// },\n// {\n//    id: 'cardb16',\n//    content: 'Card - 16'\n// },\n// {\n//    id: 'cardb17',\n//    content: 'Card - 17'\n// },\n// {\n//    id: 'cardb18',\n//    content: 'Card - 18'\n// },\n// {\n//    id: 'cardb19',\n//    content: 'Card - 19'\n// },\n// {\n//    id: 'cardb20',\n//    content: 'Card - 20'\n// },\n// {\n//    id: 'cardb21',\n//    content: 'Card - 21'\n// },\n// {\n//    id: 'cardb22',\n//    content: 'Card - 22'\n// },\n// {\n//    id: 'cardb23',\n//    content: 'Card - 23'\n// },\n// {\n//    id: 'cardb24',\n//    content: 'Card - 24'\n// },\n// {\n//    id: 'cardb25',\n//    content: 'Card - 25'\n// },\n// {\n//    id: 'cardb26',\n//    content: 'Card - 26'\n// },\n// {\n//    id: 'cardb27',\n//    content: 'Card - 27'\n// },\n// {\n//    id: 'cardb28',\n//    content: 'Card - 28'\n// },\n// {\n//    id: 'cardabcd3',\n//    content: '3 - This is a Description This a descrption2'\n// },\n// {\n//    id: 'cardabcd4',\n//    content: '4 - This is just for test'\n// },\n// {\n//    id: 'cardabcd5',\n//    content: '5 - Do it right now'\n// },\n// {\n//    id: 'cardabcd6',\n//    content: `6 - Okay! Let's do it`\n// },\n// {\n//    id: 'cardabcd7',\n//    content: '7 - Lorum Epsum'\n// },\n// {\n//    id: 'cardabcd8',\n//    content: '8 - This is a Sample'\n// },\n// {\n//    id: 'cardabcd9',\n//    content: '9 - Hiring the right person'\n// },\n// {\n//    id: 'cardabcd10',\n//    content: '10 - What is onboarding?'\n// },\n// {\n//    id: 'cardabcd11',\n//    content: '11 - What is Physics?'\n// },\n// {\n//    id: 'cardabcd12',\n//    content: '12 - Answer the Following'\n// },\n// {\n//    id: 'cardabcd13',\n//    content: 'Card - 13'\n// },\n// {\n//    id: 'cardabcd14',\n//    content: 'Card - 14'\n// },\n// {\n//    id: 'cardabcd15',\n//    content: 'Card - 15'\n// },\n// {\n//    id: 'cardabcd16',\n//    content: 'Card - 16'\n// },\n// {\n//    id: 'cardabcd17',\n//    content: 'Card - 17'\n// },\n// {\n//    id: 'cardabcd18',\n//    content: 'Card - 18'\n// },\n// {\n//    id: 'cardabcd19',\n//    content: 'Card - 19'\n// },\n// {\n//    id: 'cardabcd20',\n//    content: 'Card - 20'\n// },\n// {\n//    id: 'cardabcd21',\n//    content: 'Card - 21'\n// },\n// {\n//    id: 'cardabcd22',\n//    content: 'Card - 22'\n// },\n// {\n//    id: 'cardabcd23',\n//    content: 'Card - 23'\n// },\n// {\n//    id: 'cardabcd24',\n//    content: 'Card - 24'\n// },\n// {\n//    id: 'cardabcd25',\n//    content: 'Card - 25'\n// },\n// {\n//    id: 'cardabcd26',\n//    content: 'Card - 26'\n// },\n// {\n//    id: 'cardabcd27',\n//    content: 'Card - 27'\n// },\n// {\n//    id: 'cardabcd28',\n//    content: 'Card - 28'\n// }\n","function getTextWidth(content) {\n  const text = document.createElement(\"div\");\n  document.body.appendChild(text);\n\n  text.style.height = \"auto\";\n  text.style.width = \"auto\";\n  text.style.position = \"absolute\";\n  text.style.whiteSpace = \"no-wrap\";\n  text.style.paddingLeft = \"10px\";\n  text.style.paddingRight = \"10px\";\n  text.innerHTML = content;\n\n  const width = Math.ceil(text.clientWidth);\n  let updatedWidthWithMarginAndBorder = width + 12;\n  document.body.removeChild(text);\n\n  if (updatedWidthWithMarginAndBorder > 220) {\n    updatedWidthWithMarginAndBorder = 220;\n  }\n  if (updatedWidthWithMarginAndBorder < 60) {\n    updatedWidthWithMarginAndBorder = 60;\n  }\n\n  return updatedWidthWithMarginAndBorder;\n}\n\nexport function chunkArray(array, maxWidth = 560) {\n  let index = 0;\n\n  let maxContentWidth = 560;\n  if (maxWidth === null) {\n    maxContentWidth = 560;\n  } else {\n    maxContentWidth = 760;\n  }\n\n  const arrayLength = array.length;\n  const tempArray = [];\n  let currentLength = 0;\n  let startIndex = 0;\n  let endIndex = array.length - 1;\n\n  for (index = 0; index < arrayLength; index += 1) {\n    currentLength = currentLength + getTextWidth(array[index].content);\n    if (currentLength > maxContentWidth) {\n      endIndex = index;\n      tempArray.push(array.slice(startIndex, endIndex));\n      startIndex = endIndex;\n      currentLength = array[index].content.length;\n      index = index - 1;\n    }\n    if (index === arrayLength - 1) {\n      //handles last elements\n      tempArray.push(array.slice(startIndex, arrayLength));\n    }\n  }\n\n  return tempArray;\n}\n","import React from \"react\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// import { ListManager } from \"react-beautiful-dnd-grid\";\n\nimport { chunkArray } from \"./DargAndDropUtil\";\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  maxWidth: \"220px\",\n  minWidth: \"60px\",\n  whiteSpace: \"nowrap\",\n  overflow: \"hidden\",\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n  padding: \"10px\",\n  margin: \"0 10px 10px 0\",\n  border: \"1px solid grey\",\n  // styles we need to apply on draggables\n  ...draggableStyle,\n  textOverflow: \"ellipsis\"\n});\n\nconst getListWrapperStyle = (isDraggingOver, isOpen) => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  // padding: grid,\n  minHeight: \"0.5px\",\n  display: \"flex\",\n  width: \"100%\",\n  visibility: isOpen | isDraggingOver ? \"visible\" : \"hidden\",\n  overflowX: \"hidden\"\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  paddingBottom: 0,\n  display: \"flex\",\n  width: \"100%\"\n});\n\nexport default class Cards extends React.Component {\n  state = {\n    isOpen: false,\n    maxWidth: null\n  };\n\n  openSection = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  };\n\n  componentDidMount() {\n    this.setState({\n      maxWidth: document.getElementById(\"SectionsContainer\").clientWidth\n    });\n  }\n\n  isDraggingOnToSection = false;\n\n  isDragged = isDraggingOver => {\n    console.log(\"isDraggingOver\", isDraggingOver);\n    this.isDraggingOnToSection = isDraggingOver;\n  };\n\n  renderDraggable(item, index) {\n    return (\n      <Draggable key={item.id} draggableId={item.id} index={index}>\n        {(provided, snapshot) => (\n          <div style={{ display: \"flex\" }}>\n            <div\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              style={getItemStyle(\n                snapshot.isDragging,\n                provided.draggableProps.style\n              )}\n              {...provided.dragHandleProps}\n            >\n              {item.content}\n            </div>\n            {provided.placeholder}\n          </div>\n        )}\n      </Draggable>\n    );\n  }\n\n  render() {\n    const cardsData = chunkArray(this.props.cards, this.state.maxWidth);\n\n    return (\n      <>\n        {cardsData.length > 0 ? (\n          <>\n            <button\n              onClick={this.openSection}\n              style={{\n                position: \"absolute\",\n                top: \"10px\",\n                right: \"10px\"\n              }}\n            >\n              {this.state.isOpen ? \"close\" : \"open\"}\n            </button>\n            {cardsData.map((cards, index) => (\n              <Droppable\n                droppableId={`${this.props.type}-${index}`}\n                type={`droppableSubItem`}\n                direction={\"horizontal\"}\n                key={`${this.props.type}-${index}`}\n              >\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    style={getListWrapperStyle(\n                      snapshot.isDraggingOver,\n                      this.state.isOpen\n                    )}\n                  >\n                    {this.isDragged(snapshot.isDraggingOver)}\n                    <div\n                      style={\n                        this.state.isOpen || this.isDraggingOnToSection\n                          ? { display: \"flex\", width: \"100%\" }\n                          : { display: \"none\" }\n                      }\n                    >\n                      <div\n                        style={getListStyle(snapshot.isDraggingOver)}\n                        id=\"cardsContainer\"\n                      >\n                        {cards.map((item, index) =>\n                          this.renderDraggable(item, index)\n                        )}\n                        {provided.placeholder}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </Droppable>\n            ))}\n          </>\n        ) : (\n          <Droppable\n            droppableId={`${this.props.type}-0`}\n            type={`droppableSubItem`}\n            direction={\"horizontal\"}\n            key={`${this.props.type}-0`}\n          >\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n                id=\"cardsContainer\"\n              />\n            )}\n          </Droppable>\n        )}\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport Cards from \"./Cards\";\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n  minWidth: \"150px\",\n  width: \"95%\",\n  marginLeft: \"auto\",\n  marginRight: \"auto\",\n  overflowX: \"hidden\",\n  position: \"relative\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  flex: 1\n});\n\nexport default class Sections extends Component {\n  render() {\n    return (\n      <Droppable droppableId={this.props.id} type=\"droppableItem\">\n        {(provided, snapshot) => (\n          <div\n            ref={provided.innerRef}\n            style={getListStyle(snapshot.isDraggingOver)}\n          >\n            {this.props.items.map((item, index) => (\n              <Draggable key={item.id} draggableId={item.id} index={index}>\n                {(provided, snapshot) => (\n                  <div id=\"SectionsContainer\">\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                      {...provided.dragHandleProps}\n                    >\n                      {item.content}\n                      <Cards cards={item.cards} type={`${item.id}`} />\n                    </div>\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    );\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { ListManager } from \"react-beautiful-dnd-grid\";\nimport \"./styles.css\";\n\nconst list = [\n  {\n    id: \"0\",\n    order: 0\n  },\n  {\n    id: \"1\",\n    order: 1\n  },\n  {\n    id: \"555\",\n    order: 2\n  },\n  {\n    id: \"3\",\n    order: 3\n  },\n  {\n    id: \"4\",\n    order: 4\n  },\n  {\n    id: \"5\",\n    order: 5\n  },\n  {\n    id: \"6\",\n    order: 6\n  },\n  {\n    id: \"7\",\n    order: 7\n  },\n  {\n    id: \"8\",\n    order: 8\n  },\n  {\n    id: \"9\",\n    order: 9\n  }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sortedList: sortList(props.list)\n    };\n  }\n\n  sortList = () => {\n    this.setState({\n      ...this.state,\n      sortedList: sortList(this.state.sortedList)\n    });\n  };\n\n  reorderList = (sourceIndex, destinationIndex) => {\n    console.log(sourceIndex, destinationIndex);\n    if (destinationIndex === sourceIndex) {\n      return;\n    }\n    const list = this.state.sortedList;\n\n    if (destinationIndex === 0) {\n      list[sourceIndex].order = list[0].order - 1;\n      this.sortList();\n      return;\n    }\n\n    if (destinationIndex === list.length - 1) {\n      list[sourceIndex].order = list[list.length - 1].order + 1;\n      this.sortList();\n      return;\n    }\n\n    if (destinationIndex < sourceIndex) {\n      list[sourceIndex].order =\n        (list[destinationIndex].order + list[destinationIndex - 1].order) / 2;\n      this.sortList();\n      return;\n    }\n\n    list[sourceIndex].order =\n      (list[destinationIndex].order + list[destinationIndex + 1].order) / 2;\n    this.sortList();\n  };\n\n  render = () => (\n    <div className=\"App\">\n      <ListManager\n        items={this.state.sortedList}\n        direction=\"horizontal\"\n        maxItems={4}\n        render={(item) => <ListElement item={item} />}\n        onDragEnd={this.reorderList}\n      />\n    </div>\n  );\n}\n\nfunction sortList(list) {\n  return list.slice().sort((first, second) => first.order - second.order);\n}\n\nfunction ListElement({ item: { id } }) {\n  return (\n    <div className=\"item\">\n      <div>{id}</div>\n    </div>\n  );\n}\n\nrender(<App list={list} />, document.getElementById(\"root\"));\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { WorkBookData } from \"./data\";\r\nimport Sections from \"./Sections\";\r\nimport { chunkArray } from \"./DargAndDropUtil\";\r\n\r\nimport App from \"./App\";\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle, index) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: \"10px\",\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? \"lightgreen\" : \"grey\",\r\n  maxWidth: index === 0 ? window.innerWidth : window.innerWidth / 2,\r\n  flex: 1,\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n  width: \"94%\",\r\n  overflow: \"hidden\"\r\n});\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n  padding: grid,\r\n  display: \"flex\",\r\n  flex: 1\r\n});\r\n\r\nconst getIndex = (list, value) => {\r\n  const sectionID = value.split(\"-\");\r\n  return list.findIndex((x) => x.id === sectionID[0]);\r\n};\r\n\r\nclass App1 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: WorkBookData\r\n    };\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n  }\r\n\r\n  getSections = (sectionId) => {\r\n    let l = [];\r\n    for (let i = 0; i < this.state.items.length; i++) {\r\n      for (let j = 0; j < this.state.items[i].sections.length; j++) {\r\n        if (this.state.items[i].sections[j].id === sectionId) {\r\n          l = l.concat(this.state.items[i]);\r\n        }\r\n      }\r\n    }\r\n    return l[0];\r\n  };\r\n\r\n  getCardIndex = (cards, rowId, index, updatedSourceIndex) => {\r\n    const maxWidth = document.getElementById(\"SectionsContainer\").clientWidth;\r\n    const cardsData = chunkArray(cards, maxWidth);\r\n    let previousRowsElementsCount = 0;\r\n    for (let i = 0; i < rowId; i++) {\r\n      previousRowsElementsCount += cardsData[i].length;\r\n    }\r\n\r\n    const isSourceGreaterThanDest =\r\n      updatedSourceIndex !== undefined\r\n        ? updatedSourceIndex > previousRowsElementsCount + index\r\n        : true;\r\n\r\n    let updatedIndex;\r\n\r\n    if (isSourceGreaterThanDest === true) {\r\n      updatedIndex = previousRowsElementsCount + index;\r\n    } else {\r\n      if (previousRowsElementsCount === 0) {\r\n        updatedIndex = previousRowsElementsCount + index;\r\n      } else {\r\n        updatedIndex = previousRowsElementsCount + index - 1;\r\n      }\r\n    }\r\n\r\n    return updatedIndex;\r\n  };\r\n\r\n  onDragEnd(result) {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n    const sourceIndex = result.source.index;\r\n    const destIndex = result.destination.index;\r\n    if (result.type === \"droppableListItem\") {\r\n      const lists = reorder(this.state.items, sourceIndex, destIndex);\r\n      this.setState({\r\n        items: lists\r\n      });\r\n      return;\r\n    }\r\n    if (result.type === \"droppableItem\") {\r\n      const sourceParentIndex = getIndex(\r\n        this.state.items,\r\n        result.source.droppableId\r\n      );\r\n      const destParentIndex = getIndex(\r\n        this.state.items,\r\n        result.destination.droppableId\r\n      );\r\n      const newItems = [...this.state.items];\r\n      if (sourceParentIndex === destParentIndex) {\r\n        newItems[sourceParentIndex].sections = reorder(\r\n          newItems[sourceParentIndex].sections,\r\n          sourceIndex,\r\n          destIndex\r\n        );\r\n      } else {\r\n        const [draggedItem] = newItems[sourceParentIndex].sections.splice(\r\n          sourceIndex,\r\n          1\r\n        );\r\n        newItems[destParentIndex].sections.splice(destIndex, 0, draggedItem);\r\n      }\r\n      this.setState({\r\n        items: newItems\r\n      });\r\n      return;\r\n    } else if (result.type === \"droppableSubItem\") {\r\n      const sourceSectionID = result.source.droppableId.split(\"-\")[0];\r\n      const sourceSectionRowId = parseInt(\r\n        result.source.droppableId.split(\"-\")[1]\r\n      );\r\n      const destSectionID = result.destination.droppableId.split(\"-\")[0];\r\n      const destSectionRowId = parseInt(\r\n        result.destination.droppableId.split(\"-\")[1]\r\n      );\r\n      const sourceList = this.getSections(sourceSectionID);\r\n      const destList = this.getSections(destSectionID);\r\n      const sourceParentIndex = getIndex(sourceList.sections, sourceSectionID);\r\n      const destParentIndex = getIndex(destList.sections, destSectionID);\r\n      const newCardItems = [...this.state.items];\r\n      const sourceListIndex = getIndex(newCardItems, sourceList.id);\r\n      const destListIndex = getIndex(newCardItems, destList.id);\r\n      if (sourceSectionID === destSectionID) {\r\n        if (sourceSectionRowId === destSectionRowId) {\r\n          const cards =\r\n            newCardItems[sourceListIndex].sections[sourceParentIndex].cards;\r\n\r\n          const updatedSourceIndex = this.getCardIndex(\r\n            cards,\r\n            sourceSectionRowId,\r\n            sourceIndex,\r\n            undefined\r\n          );\r\n          const updatedDestIndex = this.getCardIndex(\r\n            cards,\r\n            destSectionRowId,\r\n            destIndex,\r\n            updatedSourceIndex\r\n          );\r\n\r\n          newCardItems[sourceListIndex].sections[\r\n            sourceParentIndex\r\n          ].cards = reorder(cards, updatedSourceIndex, updatedDestIndex);\r\n        } else {\r\n          const cards =\r\n            newCardItems[sourceListIndex].sections[sourceParentIndex].cards;\r\n\r\n          const updatedSourceIndex = this.getCardIndex(\r\n            cards,\r\n            sourceSectionRowId,\r\n            sourceIndex,\r\n            undefined\r\n          );\r\n          const updatedDestIndex = this.getCardIndex(\r\n            cards,\r\n            destSectionRowId,\r\n            destIndex,\r\n            updatedSourceIndex\r\n          );\r\n\r\n          newCardItems[sourceListIndex].sections[\r\n            sourceParentIndex\r\n          ].cards = reorder(cards, updatedSourceIndex, updatedDestIndex);\r\n        }\r\n      } else {\r\n        const cards =\r\n          newCardItems[sourceListIndex].sections[sourceParentIndex].cards;\r\n\r\n        const destinationCards =\r\n          newCardItems[destListIndex].sections[destParentIndex].cards;\r\n\r\n        const updatedSourceIndex = this.getCardIndex(\r\n          cards,\r\n          sourceSectionRowId,\r\n          sourceIndex,\r\n          undefined\r\n        );\r\n        const updatedDestIndex = this.getCardIndex(\r\n          destinationCards,\r\n          destSectionRowId,\r\n          destIndex,\r\n          undefined\r\n        );\r\n\r\n        const [draggedItem] = newCardItems[sourceListIndex].sections[\r\n          sourceParentIndex\r\n        ].cards.splice(updatedSourceIndex, 1);\r\n        newCardItems[destListIndex].sections[destParentIndex].cards.splice(\r\n          updatedDestIndex,\r\n          0,\r\n          draggedItem\r\n        );\r\n      }\r\n\r\n      this.setState({\r\n        items: newCardItems\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Droppable\r\n          droppableId=\"droppableList\"\r\n          type=\"droppableListItem\"\r\n          direction=\"horizontal\"\r\n        >\r\n          {(provided, snapshot) => (\r\n            <div\r\n              ref={provided.innerRef}\r\n              style={getListStyle(snapshot.isDraggingOver)}\r\n            >\r\n              {this.state.items.map((item, index) => (\r\n                <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <div style={{ padding: \"2px\", width: \"50%\" }}>\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style,\r\n                          index\r\n                        )}\r\n                        {...provided.dragHandleProps}\r\n                      >\r\n                        {item.content}\r\n                        <Sections items={item.sections} id={item.id} />\r\n                      </div>\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n// ReactDOM.render(\r\n//   <section>\r\n//     <App />\r\n//   </section>,\r\n//   document.getElementById(\"root\")\r\n// );\r\n"],"sourceRoot":""}